    /* Start Variables */
    /* var(Variable Name, Fall Back Value)
 The var() function is used to insert the value of a CSS variable.
 CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries تساؤلات.
 A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables*/
    
     :root {
        --main-color: #10cab7;
        --section-padding: 60px;
        --background-color: #d6d6d1ec;
        --font-weight: 800;
        --line-height: 1.8;
        --text-color: #747474;
    }
    /* End Variables

/* this is for the any start in styling we call it[1] Global Rules 
 also this include the paddings and the margins into the width and the height*/
    /* start Global Rules */
    
    * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }
    /* this is from the google fonts link we choose the fonts to all the body 
 */
    
    body {
        font-family: 'Work Sans', sans-serif;
    }
    
    .container {
        padding-left: 15px;
        /*we did the padding to fit on the mobile utilizition just to the left and the right */
        padding-right: 15px;
        margin-left: auto;
        /*in the center*/
        margin-right: auto;
    }
    /* Using media queries are a popular technique for delivering a tailored مخصص style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).
Media queries can be used to check many things, such as:
width and height of the viewport
width and height of the device
orientation الخطابة (is the tablet/phone in landscape or portrait mode?)
resolution قرار */
    /* Small */
    
    @media (min-width: 768px) {
        .container {
            width: 750px;
        }
    }
    /* Medium */
    
    @media (min-width: 992px) {
        .container {
            width: 970px;
        }
    }
    /* Large */
    
    @media (min-width: 1200px) {
        .container {
            width: 1170px;
        }
    }
    
    html {
        scroll-behavior: smooth;
        /* The scroll-behavior property specifies whether to smoothly animate the scroll position,
         instead of a straight jump, when the user clicks on a link within a scrollable box. */
    }
    /* End of Global Rules */
    /* Start speacial heading */
    
    .speacial-heading {
        text-align: center;
        font-weight: var(--font-weight);
        color: #ebeced;
        letter-spacing: -2px;
        margin: 0;
        font-size: 100px;
    }
    
    .speacial-heading+p {
        /* div + p it means that the pragraph is directly under the div i did this because there will be not only paragraph */
        text-align: center;
        margin: -30px 0 0;
        /* I've tried to do only margin-bottom but it gave value to top as well so i had to write 0 and if i write top aswell will gave value to bottom and
    it will gives effect to the next element */
        font-size: 20px;
        color: var(--text-color);
    }
    
    @media (max-width: 767px) {
        /* we did this because it has problem with width in mobile */
        .speacial-heading {
            font-size: 60px;
        }
        .speacial-heading+p {
            margin-top: -20px;
        }
    }
    /* End speacial heading */
    /* Start Header  */
    
    .header {
        padding: 20px;
    }
    
    .header .container {
        display: flex;
        /* to be able to set the space between attribute */
        justify-content: space-between;
        /* because we want to do space between th ogo and the icon  */
        align-items: center;
        /* to be the items in the center so the apace be equale between them */
    }
    
    .header .logo {
        width: 60px;
    }
    
    .header .links {
        position: relative;
    }
    
    .header .links:hover .icon span:nth-child(2) {
        width: 100%;
        /* this if we do hover on the links the sapn2 on the icon will 100% */
    }
    
    .header .links .icon {
        width: 30px;
        display: flex;
        flex-wrap: wrap;
        /*when the elements need to go down it will by wrap under each other*/
        justify-content: flex-end;
        /* because the second bar is short and in the left */
    }
    
    .header .links:hover ul {
        display: block;
    }
    
    .header .links .icon span {
        background-color: black;
        margin-bottom: 5px;
        /* to not make them stick together */
        height: 2px;
    }
    
    .header .links .icon span:first-child {
        width: 100%;
    }
    
    .header .links .icon span:nth-child(2) {
        width: 60%;
        transition: 0.3s;
    }
    
    .header .links .icon span:last-child {
        width: 100%;
    }
    
    .header .links ul {
        list-style: none;
        padding: 0;
        /* in the center */
        margin: 0;
        /* in the center */
        position: absolute;
        background-color: var(--background-color);
        right: 0;
        /* to start from the icon level and it ont go out the screen because without it will appear a scroll*/
        min-width: 200px;
        /* The min-width property defines the minimum width of an element.
If the content is smaller than the minimum width, the minimum width will be applied.
If the content is larger than the minimum width, the min-width property has no effect. */
        top: calc(100% + 15px);
        /* beacuse we need to do the arrow shape ^*/
        transition: 0.3s;
        display: none;
        z-index: 1;
        /* we need to show list above the image so we write z-index  which an element with greater stack order is always in front of an element with a lower stack order.
Note: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and 
flex items (elements that are direct children of display:flex elements). */
    }
    
    .header .links ul::before {
        content: "";
        border-width: 10px;
        border-style: solid;
        border-color: transparent transparent var(--background-color) transparent;
        position: absolute;
        right: 5px;
        top: -20px;
    }
    
    .header .links ul li a {
        display: block;
        /* Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width ,
    beacuse inline: it doesn't add line break and it dosen't respect width and height but it respwcts padding and margin from onlt tow sides left and right 
    so we need to do space in the bottom between th links that;s why we did the block display*/
        padding: 15px;
        text-decoration: none;
        color: #333;
        transition: 0.3s;
    }
    
    .header .links ul li a:hover {
        padding-left: 25px;
    }
    
    .header .links ul li:not(:last-child) a {
        border-bottom: 1px solid beige;
    }
    /* End Header */
    /* Start Landing Section */
    
    .landing {
        background-image: url(../image/landing.jpg);
        background-size: cover;
        height: calc(100vh - 64px);
        /*we need to make the cover image in fullscreen so we write 100 view bord height but it has a scroll so we need to remove it by
    because of the header height which is 64px i know it by pointed on it so to make a fullscreen vertical image we need to subtract the header height value,
but the scroll remaine that's because the margin default value of the h1 so we do to the h1 margin zero */
        position: relative;
        /*to make the header and the pragraph in the middle of the up div which it is the landing ,
    because if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.*/
    }
    
    .landing .intro-text {
        /* we need to put in the center we do the old attribute */
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        width: 320px;
        min-width: 100%;
        /* this to be break after & */
    }
    
    .landing .intro-text h1 {
        margin: 0;
        color: var(--main-color);
        font-weight: bold;
        font-size: 60px;
    }
    
    .landing .intro-text p {
        font-size: 20px;
        line-height: var(--line-height);
        font-weight: var(--font-weight);
    }
    /* End Landing Section */
    /* Start Features */
    
    .features {
        background-color: var(--background-color);
        padding-top: var(--section-padding);
        padding-bottom: var(--section-padding);
    }
    
    .features .container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        /* it will do fullscreen and it starts from 300px and if ther's left space will took fraction */
        grid-gap: 20px;
    }
    
    .features .feat {
        padding: 20px;
        text-align: center;
    }
    
    .features .container .feat i {
        color: var(--main-color);
    }
    
    .features .feat h3 {
        margin: 20px 0;
        font-weight: var(--font-weight);
    }
    
    .features .feat p {
        line-height: 2;
        font-size: 20px;
        color: #333;
    }
    /* End Features  */
    /* Start Services   */
    
    .services {
        padding-top: var(--section-padding);
        padding-bottom: var(--section-padding);
    }
    
    .services .services-content {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 30px;
        margin-top: 100px;
    }
    
    .services .services-content .svr {
        display: flex;
        /* we want to use flex attributes */
        margin-bottom: 40px;
        /* if we do the margin to all sides will notice notice change in the mobile screen  */
    }
    
    @media (max-width: 767px) {
        .services .services-content .svr {
            flex-direction: column;
            text-align: center;
        }
    }
    
    .services .services-content .svr i {
        color: var(--main-color);
        flex-basis: 60px;
        /* The flex-basis property specifies the initial length of a flexible item , it is the same of the width but we used basis because of the mobile will cjange the shape totally
      */
    }
    
    .services .services-content .svr .text {
        flex: 1;
        /* The flex-grow property specifies how much the item will grow relative to the rest of the flexible items inside the same container.
     The flex-shrink property specifies how the item will shrink relative to the rest of the flexible items inside the same container
    }The flex-basis property specifies the initial length of a flexible item 
    this attribute takes those three attributes 
    so it took the rest space and left the 60px to the icon
    so the basis will be 0  */
    }
    
    .services .services-content .svr .text h3 {
        /* we have notice in the h3 has margin in the css shape margin and the icon is not aligned to the class text
          so we do margin =0 */
        margin: 0;
        font-weight: var(--font-weight);
    }
    
    .services .services-content .svr .text p {
        line-height: var(--line-height);
        color: #333;
        font-weight: 300;
        /* this font appeares like aslght color  */
    }
    
    .services .services-content .image {
        position: relative;
        /* because we need to do the shape by position absolute so we need to do it with before and after pseudo elements */
        text-align: center;
    }
    
    .services .services-content .col .image::before {
        content: "";
        position: absolute;
        width: 120px;
        height: calc(100% + 100px);
        /* I want to get a rectangle so we add the 100px */
        right: 0;
        /* it means it starts from the right, I want it to be in the left but above the image that's why I didn't use after */
        top: -50px;
        /* that's what whoud be the position of te shape after we added the 100px  */
        background-color: black;
        background-image: linear-gradient(to left, black, white);
        z-index: -1;
        /* to be under the image,  z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and 
flex items (elements that are direct children of display:flex elements) */
    }
    
    .services .services-content .image img {
        width: 260px;
    }
    
    @media (max-width :1199px) {
        /* we want to hide the image in this media because it doesn't fit we do target in the class image and we display none, */
        .img-none {
            display: none;
        }
    }
    /* End Services   */
    /* Start Portfolio */
    
    .portfolio {
        background-color: var(--background-color);
        padding-top: var(--section-padding);
        padding-bottom: var(--section-padding);
    }
    
    .portfolio .container .port-contents {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        /* it will do fullscreen and it starts from 300px and if ther's left space will took fraction */
        grid-gap: 40px;
        margin-top: 70px;
        /* this is to seperate the heading and the grid cards  */
        justify-content: space-between;
    }
    
    .portfolio .port-contents .port img {
        max-width: 100%;
        /* this to be contain in the card  */
    }
    
    .portfolio .port-contents .port {
        background-color: white;
    }
    
    .portfolio .port-contents .port .text h3 {
        font-weight: var(--font-weight);
    }
    
    .portfolio .port-contents .port .text p {
        line-height: var(--line-height);
        color: #333;
        font-weight: 400;
    }
    
    .portfolio .port-contents .port .text {
        padding: 20px;
    }
    /* End Portfolio */
    /* Start About */
    
    .about {
        padding-top: var(--section-padding);
        padding-bottom: calc(var(--section-padding) + 60px);
        /* this is the main dimentions to any section to seperate it of the previuos section */
    }
    
    .about .about-content {
        display: flex;
        margin-top: 100px;
        /* this to seperate the speacil-heading and the other content */
        flex-wrap: wrap;
        justify-content: space-between;
        /* because if we had any expansion it will go below
     and we want it to be nder each other */
    }
    
    @media (max-width:991px) {
        .about .about-content {
            flex-direction: column;
            text-align: center;
        }
    }
    
    .about .about-content .image {
        position: relative;
        /* we want to draw shape */
        width: 250px;
        /* those are for the div that hold the image */
        height: 375px;
    }
    
    @media (max-width:991px) {
        .about .about-content .image {
            margin: 0 auto 60px;
        }
    }
    
    .about .about-content .image::before {
        content: "";
        position: absolute;
        width: 100px;
        height: calc(100% + 80px);
        background-color: var(--background-color);
        left: -20px;
        top: -40px;
        z-index: -1;
        /* i want it underthe image */
    }
    
    .about .about-content .image::after {
        content: "";
        position: absolute;
        width: 120px;
        height: 300px;
        top: -40px;
        border-bottom: 80px solid var(--main-color);
        border-left: 80px solid var(--main-color);
        right: -150px;
        z-index: -1;
    }
    
    @media (max-width:991px) {
        .about .about-content .image::before,
        .about .about-content .image::after {
            display: none;
        }
    }
    
    .about .about-content .image img {
        max-width: 100%;
    }
    
    .about .about-content .text {
        flex-basis: calc(100% - 500px);
        line-height: var(--line-height);
    }
    
    .about .about-content .text p:first-child {
        font-weight: bold;
        margin-bottom: 40px;
    }
    
    .about .about-content .text hr {
        display: inline-block;
        /* Displays an element as an inline-level block container. The element itself is formatted as an inline element, 
        but you can apply height and width values */
        width: 50%;
        border-color: var(--main-color);
    }
    
    .about .about-content .text p:nth-child(3) {
        font-weight: 300;
        margin-top: 30px;
    }
    /* End About */
    /* Start Contact */
    
    .contact {
        background-color: var(--background-color);
        padding-top: var(--section-padding);
        padding-bottom: var(--section-padding);
    }
    
    .contact .contact-content {
        padding-top: var(--section-padding);
        padding-bottom: var(--section-padding);
        text-align: center;
    }
    
    .contact .contact-content .paragraph {
        font-weight: var(--font-weight);
        color: rgb(57 61 90);
        font-size: 35px;
        letter-spacing: -2px;
        margin-bottom: 15px;
    }
    
    .contact .contact-content .link {
        display: block;
        /* this to be able to move the element because the lnks doesn't respect margin and padding on the vertical position */
        font-weight: var(--font-weight);
        font-size: 30px;
        color: var(--main-color);
        text-decoration: none;
    }
    
    .contact .container .contact-content .icon-social {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        font-size: 15px;
    }
    
    .contact .container .contact-content .icon-social i {
        margin-left: 10px;
    }
    
    @media (max-width:767px) {
        .contact .contact-content .paragraph,
        .contact .contact-content .link {
            font-size: 25px;
        }
    }
    /* End Contact */
    /* Start Footer  */
    
    .footer {
        background-color: rgb(57 61 90);
        padding-top: 20px;
        padding-bottom: 20px;
        text-align: center;
        color: beige;
        font-size: 18px;
    }
    
    .footer span {
        color: var(--main-color);
        font-weight: bold;
    }
    /* End Footer  */